syntax = "proto3";
package it_has_alternatives;

service it_has_alternatives {
    // just try to put traefik outside the docker, then handle 80 port directly
    // then do auth only for requests_url that starts with 'it_has_alternatives'
    // for others, forward them to docker

    // we only allow get_special_jwt() function not include the jwt token
    // others, has to pass an jwt_check api, for example /is_admin, if it returns 200, then pass, if it returns 500, then refuse
    rpc get_special_jwt (Get_Special_JWT_Request) returns (Get_Special_JWT_Response);
    rpc is_jwt_ok (is_JWT_ok_Request) returns (is_JWT_ok_Response);

    rpc search_alternatives (Search_Alternative_Request) returns (Search_Alternative_Response);
    rpc get_an_object (Get_an_object_Request) returns (Get_an_object_Response);
    rpc add_alternative (Add_Object_Request) returns (Add_Object_Response);
    rpc update_alternative (Update_Object_Request) returns (Update_Object_Response);
    rpc delete_alternative (Delete_Object_Request) returns (Delete_Object_Response);
}

enum Sort_By {
    like = 0;
    dislike = 1;
}

message An_Object {
    string id = 1;
    string name = 2;
    string description = 3;
    int64 likes = 4; 
    int64 dislikes = 5; 
    repeated string alternative_id_list = 6;
}

message Get_Special_JWT_Request {
    string email = 1;
    string password = 2; // it needs to have a strong password
}

message Get_Special_JWT_Response {
    string error = 1;
    string encrypted_jwt = 2;
}

message is_JWT_ok_Request {
    string jwt = 1;
}

message is_JWT_ok_Response {
    string error = 1;
    bool ok = 2;
    bool is_admin = 3;
}

message Search_Alternative_Request {
    string key_words = 1;
    string keywords_of_name = 2;
    string keywords_of_description = 3;
    Sort_By sort_by = 4;
    int64 page_size = 5;
    int64 page_number = 6;
}

message Search_Alternative_Response {
    optional string error = 1;
    repeated An_Object alternative_object_list = 2;
}

message Get_an_object_Request {
    string id = 1;
    string name = 2;
}

message Get_an_object_Response {
    optional string error = 1;
    An_Object an_object = 2;
}

message Add_Object_Request {
    An_Object an_object = 1;
}

message Add_Object_Response {
    optional string error = 1;
    bool success = 2;
}

message Update_Object_Request {
    An_Object an_object = 1;
}

message Update_Object_Response {
    optional string error = 1;
    bool success = 2;
}

message Delete_Object_Request {
    An_Object an_object = 1;
}

message Delete_Object_Response {
    optional string error = 1;
    bool success = 2;
}
